# -*- coding: utf-8 -*-
"""
streamlit_app.py ‚Äî ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°" ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
    1) ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• 'career_fit_model.pkl' ‡πÑ‡∏ß‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
       ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'artifacts/' (‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    2) ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:  streamlit run streamlit_app.py
"""

from pathlib import Path
import sklearn
import pickle
import pandas as pd
import streamlit as st

st.set_page_config(page_title="Career Recommender", layout="wide")

# ---------- Load model ----------
@st.cache_resource
def load_bundle():
    candidates = [
        Path("career_fit_model.pkl"),
        
    ]
    for p in candidates:
        if p.exists():
            with open(p, "rb") as f:
                return pickle.load(f)
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• 'career_fit_model.pkl' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'artifacts/'")
    st.stop()

bundle = load_bundle()
model = bundle["model"]
feature_cols = bundle["feature_cols"]
grade_to_points = bundle.get("grade_to_points", {"A":4.0, "B+":3.5, "B":3.0, "C+":2.5, "C":2.0, "D+":1.5, "D":1.0, "F":0.0})
subject_cols = [c for c in feature_cols if c not in ["‡πÄ‡∏û‡∏®", "‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ", "GPA"]]

# ---------- UI ----------
st.title("üîé ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏î‡πâ‡∏ß‡∏¢ Data Science")
st.caption("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")

col_left, col_right = st.columns([1,1])

with col_left:
    gender = st.selectbox("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"])
    year = st.selectbox("‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ", [1,2,3,4], index=3)
    gpa = st.number_input("GPA", min_value=0.00, max_value=4.00, value=3.20, step=0.01, format="%.2f")

grade_options = ["A", "B+", "B", "C+", "C", "D+", "D", "F"]

with col_right:
    gr_info = st.selectbox("‡πÄ‡∏Å‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", grade_options, index=1)
    gr_arch = st.selectbox("‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", grade_options, index=2)
    gr_prog = st.selectbox("‡πÄ‡∏Å‡∏£‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", grade_options, index=0)
    gr_mkt  = st.selectbox("‡πÄ‡∏Å‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î", grade_options, index=2)
    gr_logi = st.selectbox("‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", grade_options, index=2)
    gr_biz  = st.selectbox("‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", grade_options, index=1)
    gr_net  = st.selectbox("‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï", grade_options, index=1)
    gr_comm = st.selectbox("‡πÄ‡∏Å‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ 1", grade_options, index=2)

st.markdown("---")

btn = st.button("üß† ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", use_container_width=True)

if btn:
    # ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÅ‡∏ñ‡∏ß ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    person = {
        "‡πÄ‡∏û‡∏®": gender,
        "‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ": int(year),
        "GPA": float(gpa),
        "‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô": gr_info,
        "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå": gr_arch,
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô": gr_prog,
        "‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î": gr_mkt,
        "‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï": gr_logi,
        "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à": gr_biz,
        "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï": gr_net,
        "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ 1": gr_comm,
    }
    row = pd.DataFrame([person])

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    row["‡πÄ‡∏û‡∏®"] = row["‡πÄ‡∏û‡∏®"].map({"‡∏ä‡∏≤‡∏¢":0, "‡∏´‡∏ç‡∏¥‡∏á":1})
    for c in subject_cols:
        row[c] = row[c].map(grade_to_points)

    # ‡∏à‡∏±‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏° model.feature_cols (‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö)
    missing = [c for c in feature_cols if c not in row.columns]
    if missing:
        st.error(f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {missing}")
        st.stop()
    row = row[feature_cols]

    pred = model.predict(row)[0]
    proba = model.predict_proba(row)[0]
    proba_series = pd.Series(proba, index=model.classes_).sort_values(ascending=False)

    st.success(f"üéØ ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°: **{pred}**")
    st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏ä‡∏µ‡∏û")
    st.bar_chart(proba_series)

    with st.expander("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï/‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô"):
        st.dataframe(row, use_container_width=True)

st.sidebar.markdown("### ‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.sidebar.write(
    "- ‡πÇ‡∏°‡πÄ‡∏î‡∏•: RandomForest (multi-class)\n"
    "- ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: ‡πÄ‡∏û‡∏®, ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ, GPA, ‡πÄ‡∏Å‡∏£‡∏î 8 ‡∏ß‡∏¥‡∏ä‡∏≤\n"
    "- ‡πÄ‡∏Å‡∏£‡∏î‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: A=4, B+=3.5, B=3, C+=2.5, C=2, D+=1.5, D=1, F=0"
)


